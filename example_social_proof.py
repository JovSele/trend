"""
Example: Social Proof Module Integration
==========================================
Uk√°≈æka pou≈æitia social proof modulu pre anal√Ωzu patentov√Ωch keywords.
"""

import os
from dotenv import load_dotenv
from modules import SocialProof

# Naƒç√≠tanie environment premenn√Ωch
load_dotenv()


def example_basic_usage():
    """Z√°kladn√© pou≈æitie - kontrola jedn√©ho keyword na jednej platforme"""
    
    # Inicializ√°cia (potrebn√© API keys z Google Custom Search)
    api_key = os.getenv('GOOGLE_CUSTOM_SEARCH_API_KEY')
    search_engine_id = os.getenv('GOOGLE_CUSTOM_SEARCH_ENGINE_ID')
    
    if not api_key or not search_engine_id:
        print("‚ö†Ô∏è  Ch√Ωbaj√∫ API keys v .env s√∫bore:")
        print("   GOOGLE_CUSTOM_SEARCH_API_KEY")
        print("   GOOGLE_CUSTOM_SEARCH_ENGINE_ID")
        return
    
    sp = SocialProof(api_key=api_key, search_engine_id=search_engine_id)
    
    # Kontrola jedn√©ho keyword
    result = sp.check("artificial intelligence", "reddit")
    print(f"\nüìä V√Ωsledok:")
    print(f"   Keyword: {result.keyword}")
    print(f"   Platform: {result.platform}")
    print(f"   Mentions: {result.mentions:,}")
    print(f"   Timestamp: {result.timestamp}")


def example_multiple_platforms():
    """Kontrola jedn√©ho keyword na viacer√Ωch platform√°ch"""
    
    api_key = os.getenv('GOOGLE_CUSTOM_SEARCH_API_KEY')
    search_engine_id = os.getenv('GOOGLE_CUSTOM_SEARCH_ENGINE_ID')
    
    if not api_key or not search_engine_id:
        print("‚ö†Ô∏è  Ch√Ωbaj√∫ API keys")
        return
    
    sp = SocialProof(api_key=api_key, search_engine_id=search_engine_id, delay=2.0)
    
    keyword = "blockchain"
    platforms = ["reddit", "twitter", "hackernews", "github"]
    
    print(f"\nüîç Anal√Ωza keyword: '{keyword}'")
    print(f"   Platformy: {', '.join(platforms)}\n")
    
    results = sp.check_multiple(keyword, platforms)
    
    print("üìä V√Ωsledky:")
    for r in results:
        print(f"   {r.platform:15s}: {r.mentions:>8,} mentions")
    
    total = sum(r.mentions for r in results)
    print(f"\n   {'TOTAL':15s}: {total:>8,} mentions")


def example_compare_keywords():
    """Porovnanie viacer√Ωch keywords na jednej platforme"""
    
    api_key = os.getenv('GOOGLE_CUSTOM_SEARCH_API_KEY')
    search_engine_id = os.getenv('GOOGLE_CUSTOM_SEARCH_ENGINE_ID')
    
    if not api_key or not search_engine_id:
        print("‚ö†Ô∏è  Ch√Ωbaj√∫ API keys")
        return
    
    sp = SocialProof(api_key=api_key, search_engine_id=search_engine_id, delay=2.0)
    
    keywords = ["machine learning", "deep learning", "neural networks"]
    platform = "stackoverflow"
    
    print(f"\nüîç Porovnanie keywords na: {platform}")
    print(f"   Keywords: {', '.join(keywords)}\n")
    
    results = sp.compare(keywords, platform)
    
    print("üìä V√Ωsledky (zoraden√© podƒæa popularity):")
    for i, r in enumerate(results, 1):
        print(f"   {i}. {r.keyword:20s}: {r.mentions:>8,} mentions")


def example_patent_keywords():
    """Pr√≠klad anal√Ωzy patentov√Ωch keywords"""
    
    api_key = os.getenv('GOOGLE_CUSTOM_SEARCH_API_KEY')
    search_engine_id = os.getenv('GOOGLE_CUSTOM_SEARCH_ENGINE_ID')
    
    if not api_key or not search_engine_id:
        print("‚ö†Ô∏è  Ch√Ωbaj√∫ API keys")
        return
    
    sp = SocialProof(api_key=api_key, search_engine_id=search_engine_id, delay=2.0)
    
    # Simul√°cia AI-generovan√Ωch keywords z patentu
    patent_keywords = [
        "quantum computing",
        "quantum algorithms",
        "quantum cryptography"
    ]
    
    platforms = ["reddit", "hackernews", "github"]
    
    print(f"\nüî¨ Anal√Ωza patentov√Ωch keywords")
    print(f"   Keywords: {len(patent_keywords)}")
    print(f"   Platforms: {len(platforms)}\n")
    
    # Anal√Ωza ka≈æd√©ho keyword na v≈°etk√Ωch platform√°ch
    for keyword in patent_keywords:
        print(f"üìå {keyword}:")
        results = sp.check_multiple(keyword, platforms)
        
        for r in results:
            print(f"   {r.platform:15s}: {r.mentions:>6,} mentions")
        
        total = sum(r.mentions for r in results)
        print(f"   {'TOTAL':15s}: {total:>6,} mentions\n")


if __name__ == "__main__":
    print("=" * 70)
    print("üîç SOCIAL PROOF MODULE - Examples")
    print("=" * 70)
    
    # Vyber pr√≠klad na spustenie
    print("\nDostupn√© pr√≠klady:")
    print("1. Z√°kladn√© pou≈æitie (1 keyword, 1 platform)")
    print("2. Viacero platforiem (1 keyword, N platforms)")
    print("3. Porovnanie keywords (N keywords, 1 platform)")
    print("4. Patentov√© keywords (N keywords, N platforms)")
    
    choice = input("\nVyber pr√≠klad (1-4): ").strip()
    
    if choice == "1":
        example_basic_usage()
    elif choice == "2":
        example_multiple_platforms()
    elif choice == "3":
        example_compare_keywords()
    elif choice == "4":
        example_patent_keywords()
    else:
        print("\n‚ö†Ô∏è  Neplatn√° voƒæba")
        print("\nSpusti jednotliv√© pr√≠klady priamo:")
        print("  python example_social_proof.py")
